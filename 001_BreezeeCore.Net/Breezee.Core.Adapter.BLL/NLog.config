<?xml version="1.0" encoding="utf-8" ?> 
<nlog xmlns="http://www.nlog-project.org/schemas/NLog.xsd"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      throwExceptions="true" internalLogFile="c:\nlog.txt" internalLogLevel="Debug">
  <!--internalLogFile为设置Nlog本身的错误日志文件，当写入日志不成功时查看，以查找原因。-->
  <!-- 定义参数：
    ${basedir}：系统路径
    ${shortdate}：短日期 yyyy-MM-dd(例:2013-01-31)
    ${basedir}/Log/${shortdate}：即为在系统路径下的Log文件夹下面的日期文件夹
  -->
  <variable name="logDirectory" value="${basedir}/Log/${shortdate}"/>
<targets>
  <!--1、日志写入文件：已测试通过-->
  <!-- 定义输出模板：
        type="File"：这个记录方式为文件类型
        fileName="${logDirectory}/All.log"：表示输出到文件All.log中
        layout="..."：输出文件中错误的显示格式
        ${logDirectory}：为上述定义的路径
        ${longdate}：输出长日期 yyyy-MM-dd HH:mm:ss.ffff(例:2013-01-31 14:49:21.2120)
        ${level}：错误等级(由低到高为Trace，Debug，Info，Warn，Error，Fatal)
        ${newline}：输出 新的一行
        ${stacktrace}：输出 堆栈信息
        ${callsite:className=True:fileName=True:includeSourcePath=True:methodName=True}：输出 命名空间.类名.方法名(文件路径:行号)
        ${message}：输出错误信息
   -->
  <target name="AllFile" xsi:type="File" fileName="${logDirectory}/All.log"
                layout="${longdate}        ■${level}${newline}    ▲${stacktrace}${newline}    ◇${callsite:className=True:fileName=True:includeSourcePath=True:methodName=True}${newline}    ◆${message}${newline}${newline}***************************************************************************" />
  <target name="UI" xsi:type="File" fileName="${logDirectory}/UI.log"
            layout="${longdate}        ■${level}${newline}    ▲${stacktrace}${newline}    ◇${callsite:className=True:fileName=True:includeSourcePath=True:methodName=True}${newline}    ◆${message}${newline}${newline}***************************************************************************" />

  <target name="BUS" xsi:type="File" fileName="${logDirectory}/BUS.log"
      layout="${longdate}        ■${level}${newline}    ▲${stacktrace}${newline}    ◇${callsite:className=True:fileName=True:includeSourcePath=True:methodName=True}${newline}    ◆${message}${newline}${newline}***************************************************************************" />

  <target name="DAC" xsi:type="File" fileName="${logDirectory}/DAC.log"
      layout="${longdate}        ■${level}${newline}    ▲${stacktrace}${newline}    ◇${callsite:className=True:fileName=True:includeSourcePath=True:methodName=True}${newline}    ◆${message}${newline}${newline}***************************************************************************" />

  <!--1.1、异步文件日志-->
  <!-- Log in a separate thread, possibly queueing up to
        5000 messages. When the queue overflows, discard any
        extra messages-->
  <target name="AsynFile" xsi:type="AsyncWrapper" queueLimit="5000" overflowAction="Discard">
    <target xsi:type="File" fileName="${logDirectory}/${level}.txt" />
  </target>

  <!--1.2、CSV格式文件日志：已测试通过-->
  <target name="CsvFile" xsi:type="File" fileName="${logDirectory}/log.csv">
    <layout xsi:type="CSVLayout">
      <column name="time" layout="${longdate}" />
      <column name="message" layout="${message}" />
      <column name="logger" layout="${logger}"/>
      <column name="level" layout="${level}"/>
    </layout>
  </target>
  
  
  <!--2、日志写入数据库-->
  <!-- 定义输出到MySQL中：
        type="Database"：这个记录方式是数据库
        dbProvider="MySql.Data.MySqlClient"：使用MySQL的连接方式
        connectionString="Server=XXX.XXX.XXX.XXX;Database=ProjectLogDB;Uid=XXX;Pwd=XXX;"：数据库的连接字符串
        commandText="insert into Logs(CreateDate,LogLevel,CallSite,Massage,StackTrace) values (@CreateDate,@LogLevel,@CallSite,@Massage,@StackTrace)"：insert语句
        <parameter name="CreateDate" layout="${longdate}" />对应到insert语句的参数的值
   -->
  <!--<target name="AllMySqlDatabase" xsi:type="Database" dbProvider="MySql.Data.MySqlClient"
                  connectionString="Server=XXX.XXX.XXX.XXX;Database=ProjectLogDB;Uid=XXX;Pwd=XXX;"
                  commandText="insert into Logs(CreateDate,LogLevel,CallSite,Massage,StackTrace) values (@CreateDate,@LogLevel,@CallSite,@Massage,@StackTrace)">
    <parameter name="CreateDate" layout="${longdate}" />
    <parameter name="LogLevel" layout="${level}" />
    <parameter name="CallSite" layout="${callsite:className=True:fileName=True:includeSourcePath=True:methodName=True}" />
    <parameter name="Massage" layout="${message}" />
    <parameter name="StackTrace" layout="${stacktrace}" />
  </target>-->
  <!--SQL Server数据库配置：已测试通过-->
  <!--注：字段不要超长。日志时间如用Nlog定义的变量，那么需要定义表名为字符，如为时间会报转换错误。
  或者直接取数据库当前时间为日志时间-->
  <!--<target name="AllSqlServerDatabase" xsi:type="database">
    <dbProvider>sqlserver</dbProvider>
    <connectionString>Data Source=.;Initial Catalog=AprilSpring;User Id=sa;Password=sa;</connectionString>
    <commandText>
      INSERT INTO SYS_LOG
      (LogID ,AppName ,ModuleName ,ProcName ,LogLevel ,LogTitle ,LogMessage ,LogDate ,
      StackTrace ,REMARK ,CREATE_TIME ,CREATOR_ID ,CREATOR ,MODIFIER_ID ,MODIFIER ,LAST_UPDATED_TIME ,IS_ENABLED ,
      IS_SYSTEM ,ORG_ID ,UPDATE_CONTROL_ID ,TFLAG )
      VALUES ( NEWID(), @AppName ,@ModuleName ,@ProcName ,@LogLevel ,@LogTitle ,@LogMessage , GETDATE()  ,
      @StackTrace ,@remark ,GETDATE() ,'1' ,'SYSTEM', '1' ,'SYSTEM',GETDATE() ,'1' ,
      '1' , '1' , NEWID() ,'0' );
    </commandText>
    <parameter name="@appName" layout="${event-context:item=appName}"/>
    <parameter name="@moduleName" layout="${event-context:item=moduleName}"/>
    <parameter name="@procName" layout="${event-context:item=procName}"/>
    <parameter name="@logLevel" layout="${event-context:item=logLevel}"/>
    <parameter name="@logTitle" layout="${event-context:item=logTitle}"/>
    <parameter name="@logMessage" layout="${event-context:item=logMessage}"/>
    --><!--<parameter name="@logDate" layout="${longdate}"/>--><!--
    <parameter name="@stackTrace" layout="${stacktrace}"/>
    <parameter name="@remark" layout="${event-context:item=remark}"/>
  </target>-->
  
  <!--3、日志通过电邮发送：已测试通过-->
  <!--body="${longdate} ${level} ${callsite} ${message} ${exception:format=Message, Type, ShortType, ToString, Method, StackTrace}"
      layout="${longdate} ${level} ${callsite} ${message} ${exception:format=Message, Type, ShortType, ToString, Method, StackTrace}"
  -->
  <!--要在网页版的电邮网站中设置为支持POP3和SMTP，才能正常发送电邮。多个电邮以逗号分隔-->
  <target name="SendMail"
            type="Mail"
            html="false"
            addNewLines="true"
            subject="${message}"
            to="guo7892000@126.com,6455879@qq.com"
            from="guo7892004@126.com"
            smtpUserName="guo7892004"
            smtpPassword="peachtest123"
            enableSsl="true"
            smtpAuthentication="Basic"
            smtpServer="smtp.126.com"
            smtpPort="25" 
            header="----------"
            body="${longdate} ${level} ${callsite} ${message}"
            footer="----------"
   /> 
  <!--<target name="console" xsi:type="ColoredConsole" 
	  layout="${date:format=HH\:mm\:ss}|${level}|${stacktrace}|${message}"/>
	<target name="file" xsi:type="File" fileName="${basedir}/log.txt" 
		layout="[${date:format=yyyy-MM-dd HH\:mm\:ss}][${level}] ${message} 	${exception}"/>-->
</targets>
<rules>
  <!--写入文件规则：已测试通-->
  <!--<logger name="*" minlevel="Error" writeTo="UI" />-->
  <!--<logger name="*" minlevel="Trace" writeTo="BUS" />-->
  <!--<logger name="*.DAC.*" minlevel="Trace" writeTo="DAC" />-->
  <!--发电邮规则：已测试通-->
  <!--<logger name="*" minlevel="Trace" writeTo="SendMail" />-->
  <!--CSV文件-->
  <!--<logger name="*" minlevel="Error" writeTo="CsvFile" />-->
  <!-- 定义输出日志：
        name="*"：记录所有信息
        minlevel="Trace"：记录的最低错误级别为Trace
        writeTo="AllFile,AllDatabase"：日志写入AllFile和AllSqlServerDatabase的target中-->
  <logger name="*" minlevel="Error" writeTo="AllFile" />
  <!--<logger name="*" minlevel="Error" writeTo="AllSqlServerDatabase" />-->
  <!-- 定义输出日志：
        name="*.UI.*"：记录包含.UI.的命名空间的所有信息(第一个*最好替换为固定的，例如我的UI层命名空间为J.UI那么这里就可以写J.UI.*)-->
  
  <!--<logger name="*" minlevel="debug" writeTo="console"></logger>
	<logger name="*" minlevel="debug" writeTo="file"></logger>-->
</rules>
</nlog>
